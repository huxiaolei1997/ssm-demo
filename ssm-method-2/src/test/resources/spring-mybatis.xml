<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.3.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 引入项目配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" order="1"/>

    <!--配置数据源（连接池） -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大	 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxActive" value="${druid.maxActive}" />
        <property name="connectionProperties" value="druid.stat.mergeSql=true"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 对于长时间不使用的连接强制关闭  -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${druid.logAbandoned}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="${druid.filters}" />

    </bean>


    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
<!--        <property name="ca" ref="dataSource" />-->
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>

        <property name="configLocation" value="classpath:mybatis-config.xml"/>
<!--        <property name="configurationProperties">-->
<!--            <props>-->
<!--                &lt;!&ndash; 这个配置使全局的映射器启用或禁用缓存，开启二级缓存，另外需要去mapper里面加上 <cache></cache>标签才能正常开启 &ndash;&gt;-->
<!--                <prop key="cacheEnabled">false</prop>-->
<!--                <prop key="localCacheScope">statement</prop>-->
<!--&lt;!&ndash;                <prop key="logImpl">STDOUT_LOGGING</prop>&ndash;&gt;-->
<!--                &lt;!&ndash; 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 &ndash;&gt;-->
<!--&lt;!&ndash;                <prop key="multipleResultSetsEnabled">true</prop>&ndash;&gt;-->
<!--&lt;!&ndash;                &lt;!&ndash; 配置默认的执行器。SIMPLE 执行器没有什么特别之处。REUSE 执行器重用预处理语句。BATCH 执行器重用语句和批量更新 &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;                <prop key="defaultExecutorType">REUSE</prop>&ndash;&gt;-->
<!--&lt;!&ndash;                &lt;!&ndash; 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;                <prop key="lazyLoadingEnabled">false</prop>&ndash;&gt;-->
<!--&lt;!&ndash;                <prop key="aggressiveLazyLoading">true</prop>&ndash;&gt;-->
<!--&lt;!&ndash;                &lt;!&ndash; 设置超时时间，它决定驱动等待一个数据库响应的时间。 &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;                <prop key="defaultStatementTimeout">25000</prop>&ndash;&gt;-->
<!--            </props>-->
<!--        </property>-->
<!--        <property name="plugins">-->
<!--            <list>-->
<!--                <bean id="myInterceptor" class="com.test.ssm.method2.interceptor.MyInterceptor" />-->
<!--            </list>-->
<!--        </property>-->
    </bean>

    <!-- DAL接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.test.ssm.method2.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="sqlTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启基于注解声明式事务 注意配置transaction-manager属性，它引用了我们事务管理组件对象，这里要和事务管理器组件id一致
        默认是transactionManager -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--
<tx:advice>定义事务通知，用于指定事务属性，其中“transaction-manager”属性指定事务管理器，并通过<tx:attributes>指定具体需要拦截的方法
    <tx:method>拦截方法，其中参数有：
    name:方法名称，将匹配的方法注入事务管理，可用通配符
    propagation：事务传播行为，
    isolation：事务隔离级别定义；默认为“DEFAULT”
    timeout：事务超时时间设置，单位为秒，默认-1，表示事务超时将依赖于底层事务系统；
    read-only：事务只读设置，默认为false，表示不是只读；
    rollback-for：需要触发回滚的异常定义，可定义多个，以“，”分割，默认任何RuntimeException都将导致事务回滚，而任何Checked Exception将不导致事务回滚；
    no-rollback-for：不被触发进行回滚的 Exception(s)；可定义多个，以“，”分割；
 -->
    <tx:advice id="advice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 拦截save开头的方法，事务传播行为为：REQUIRED：必须要有事务, 如果没有就在上下文创建一个 -->
            <tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED" read-only="false" rollback-for="java.lang.Exception"/>
            <!-- 支持,如果有就有,没有就没有 -->
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!-- 定义切入点，expression为切人点表达式，如下是指定impl包下的所有方法，具体以自身实际要求自定义  -->
    <aop:config>
        <aop:pointcut expression="execution(* com.test.ssm.*.serviceImpl.*.*(..))" id="pointcut"/>
        <!--<aop:advisor>定义切入点，与通知，把tx与aop的配置关联,才是完整的声明事务配置 -->
        <aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
    </aop:config>
</beans>
